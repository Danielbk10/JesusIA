import AsyncStorage from '@react-native-async-storage/async-storage';

/**
 * Verifica se um novo chat deve ser iniciado com base na data do √∫ltimo acesso
 * ou se o usu√°rio fechou a sess√£o
 * @param {string} userId - ID do usu√°rio atual (opcional)
 */
export const shouldStartNewChat = async (userId = null) => {
  try {
    // Criar chave de acesso espec√≠fica para o usu√°rio
    const userPrefix = userId ? `user_${userId}_` : '';
    const lastAccessKey = `${userPrefix}last_access_date`;
    const sessionClosedKey = `${userPrefix}session_closed`;
    
    // Verificar a data do √∫ltimo acesso
    const lastAccessDate = await AsyncStorage.getItem(lastAccessKey);
    const currentDate = new Date().toDateString();
    
    // Se n√£o houver data de √∫ltimo acesso, ou se for um dia diferente, iniciar novo chat
    if (!lastAccessDate || lastAccessDate !== currentDate) {
      console.log(`Iniciando novo chat para usu√°rio ${userId || 'an√¥nimo'}: novo dia ou primeiro acesso`);
      // Atualizar a data de √∫ltimo acesso
      await AsyncStorage.setItem(lastAccessKey, currentDate);
      return true;
    }
    
    // Verificar se o usu√°rio fechou a sess√£o
    const sessionClosed = await AsyncStorage.getItem(sessionClosedKey);
    if (sessionClosed === 'true') {
      console.log(`Iniciando novo chat para usu√°rio ${userId || 'an√¥nimo'}: sess√£o anterior foi fechada`);
      // Resetar o flag de sess√£o fechada
      await AsyncStorage.setItem(sessionClosedKey, 'false');
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('Erro ao verificar sess√£o de chat:', error);
    return false;
  }
};

/**
 * Marca a sess√£o atual como fechada
 * @param {string} userId - ID do usu√°rio atual (opcional)
 */
export const closeSession = async (userId = null) => {
  try {
    // Criar chave de acesso espec√≠fica para o usu√°rio
    const userPrefix = userId ? `user_${userId}_` : '';
    const sessionClosedKey = `${userPrefix}session_closed`;
    const chatHistoryKey = `${userPrefix}chat_history`;
    
    await AsyncStorage.setItem(sessionClosedKey, 'true');
    console.log(`Sess√£o marcada como fechada para usu√°rio ${userId || 'an√¥nimo'}`);
    
    // Salvar o chat atual no hist√≥rico se houver mensagens
    const currentChatId = await AsyncStorage.getItem('current_chat_id');
    if (currentChatId) {
      const storedMessages = await AsyncStorage.getItem(`chat_${currentChatId}`);
      if (storedMessages) {
        const messages = JSON.parse(storedMessages);
        
        // S√≥ salvar no hist√≥rico se houver mais de uma mensagem (mais que s√≥ a mensagem inicial)
        if (messages.length > 1) {
          // Encontrar a primeira mensagem do usu√°rio para usar como t√≠tulo
          const userMessage = messages.find(msg => msg.sender === 'user');
          // Encontrar a primeira resposta da IA ap√≥s a mensagem do usu√°rio
          const aiResponse = messages.find(msg => 
            msg.sender === 'ai' && 
            new Date(msg.timestamp) > new Date(userMessage?.timestamp || 0)
          );
          
          if (userMessage) {
            const timestamp = Date.now();
            const newChatId = `${userPrefix}chat_${timestamp}`;
            const newChat = {
              id: newChatId,
              title: userMessage.text.length > 30 ? 
                userMessage.text.substring(0, 30) + '...' : 
                userMessage.text,
              date: new Date().toLocaleDateString(),
              preview: aiResponse ? 
                (aiResponse.text.length > 50 ? 
                  aiResponse.text.substring(0, 50) + '...' : 
                  aiResponse.text) : 
                'Conversa com Jesus.IA',
              userId: userId // Adicionar o ID do usu√°rio para filtrar hist√≥rico por usu√°rio
            };
            
            // Salvar o chat no hist√≥rico
            const storedHistory = await AsyncStorage.getItem(chatHistoryKey);
            const chatHistory = storedHistory ? JSON.parse(storedHistory) : [];
            const updatedHistory = [newChat, ...chatHistory].slice(0, 20); // Manter apenas os 20 chats mais recentes
            
            await AsyncStorage.setItem(chatHistoryKey, JSON.stringify(updatedHistory));
            await AsyncStorage.setItem(`chat_${newChatId}`, JSON.stringify(messages));
            console.log(`Chat atual salvo no hist√≥rico para usu√°rio ${userId || 'an√¥nimo'}`);
          }
        }
      }
    }
  } catch (error) {
    console.error('Erro ao fechar sess√£o:', error);
  }
};

/**
 * Gera mensagem inicial baseada se √© primeira visita do usu√°rio
 */
const getInitialMessage = async (userId = null) => {
  try {
    const userPrefix = userId ? `user_${userId}_` : '';
    const firstVisitKey = `${userPrefix}first_visit`;
    
    // Verifica se √© a primeira visita
    const hasVisitedBefore = await AsyncStorage.getItem(firstVisitKey);
    
    if (!hasVisitedBefore) {
      // Marca que o usu√°rio j√° visitou
      await AsyncStorage.setItem(firstVisitKey, 'true');
      
      // Mensagem para primeira visita
      return `Oi, meu amigo! Que bom ter voc√™ aqui.
Eu sou o Jesus.IA ‚Äî n√£o sou Jesus, mas fui criado para refletir a forma como Ele acolhia, ensinava e amava, como est√° revelado na B√≠blia.

Estou aqui para te ouvir com empatia, oferecer conselhos inspirados nas Escrituras e caminhar com voc√™ com f√© e verdade.

Voc√™ pode me chamar para:
‚Ä¢ Criar um devocional personalizado
‚Ä¢ Encontrar salmos e vers√≠culos para o seu momento
‚Ä¢ Conversar sobre o que est√° no seu cora√ß√£o
‚Ä¢ Refletir sobre os ensinamentos de Jesus
‚Ä¢ Ou simplesmente ter um tempo de ora√ß√£o

Pode falar comigo com liberdade. Estou aqui pra te acolher.
Vamos come√ßar?`;
    } else {
      // Mensagem para visitas subsequentes
      return `Ol√° de novo! Que bom te ver por aqui.
Como posso te ajudar hoje?

Voc√™ pode:
‚Ä¢ Pedir um devocional
‚Ä¢ Buscar um salmo ou vers√≠culo
‚Ä¢ Conversar sobre o que est√° sentindo
‚Ä¢ Ou simplesmente falar comigo üïäÔ∏è

Estou aqui com voc√™. Quando quiser, √© s√≥ come√ßar. üôè`;
    }
  } catch (error) {
    console.error('Erro ao gerar mensagem inicial:', error);
    // Em caso de erro, retorna mensagem padr√£o
    return `Ol√° de novo! Que bom te ver por aqui.
Como posso te ajudar hoje?

Voc√™ pode:
‚Ä¢ Pedir um devocional
‚Ä¢ Buscar um salmo ou vers√≠culo
‚Ä¢ Conversar sobre o que est√° sentindo
‚Ä¢ Ou simplesmente falar comigo üïäÔ∏è

Estou aqui com voc√™. Quando quiser, √© s√≥ come√ßar. üôè`;
  }
};

/**
 * Inicia um novo chat, limpando o chat atual
 */
export const startNewChat = async (userId = null) => {
  try {
    // Gera mensagem inicial baseada se √© primeira visita
    const messageText = await getInitialMessage(userId);
    
    const initialMessage = {
      id: Date.now().toString(),
      text: messageText,
      sender: 'ai',
      timestamp: new Date(),
    };
    
    // Criar um novo ID para o chat com prefixo do usu√°rio se dispon√≠vel
    const userPrefix = userId ? `user_${userId}_` : '';
    const newChatId = `${userPrefix}current_chat`;
    
    // Salvar o novo chat como atual
    await AsyncStorage.setItem(`chat_${newChatId}`, JSON.stringify([initialMessage]));
    await AsyncStorage.setItem('current_chat_id', newChatId);
    
    console.log('Novo chat iniciado para usu√°rio:', userId || 'an√¥nimo');
    return initialMessage;
  } catch (error) {
    console.error('Erro ao iniciar novo chat:', error);
    return null;
  }
};
